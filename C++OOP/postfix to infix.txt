#include <iostream>
#include <string>
#include <stack>
#include <queue>

using namespace std;

class PostfixToInfixConverter {
private:
    queue<char> postfixExpression;

public:
    void getPostfix(string expression) {
        for (char c : expression) {
            if (c != ' ') {
                postfixExpression.push(c);
            }
        }
    }

    void showPostfix() {
        cout << "Postfix expression: ";
        queue<char> temp = postfixExpression;
        while (!temp.empty()) {
            cout << temp.front() << " ";
            temp.pop();
        }
        cout << endl;
    }

    void showInfix() {
        cout << "Infix expression: ";
        stack<string> infixStack;
        queue<char> temp = postfixExpression;
        while (!temp.empty()) {
            char c = temp.front();
            temp.pop();
            if (isOperator(c)) {
                string operand2 = infixStack.top();
                infixStack.pop();
                string operand1 = infixStack.top();
                infixStack.pop();
                string result = "(" + operand1 + " " + c + " " + operand2 + ")";
                infixStack.push(result);
            } else {
                string operand(1, c);
                infixStack.push(operand);
            }
        }
        cout << infixStack.top() << endl;
    }

    void convertToInfix() {
        stack<string> infixStack;
        queue<char> temp = postfixExpression;
        while (!temp.empty()) {
            char c = temp.front();
            temp.pop();
            if (isOperator(c)) {
                string operand2 = infixStack.top();
                infixStack.pop();
                string operand1 = infixStack.top();
                infixStack.pop();
                string result = "(" + operand1 + " " + c + " " + operand2 + ")";
                infixStack.push(result);
            } else {
                string operand(1, c);
                infixStack.push(operand);
            }
        }
        cout << "Infix expression: " << infixStack.top() << endl;
    }

    int precedence(char op) {
        if (op == '+' || op == '-') {
            return 1;
        } else if (op == '*' || op == '/') {
            return 2;
        }
        return 0;
    }

    bool isOperator(char c) {
        return (c == '+' || c == '-' || c == '*' || c == '/');
    }
};

int main() {
    string postfixExpression = "A B + C -";

    PostfixToInfixConverter converter;
    converter.getPostfix(postfixExpression);

    converter.showPostfix();
    converter.convertToInfix();

    return 0;
}
