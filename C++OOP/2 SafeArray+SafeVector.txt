#include <iostream>
#include <stdexcept>

using namespace std;

class SafeArray {
protected:
    int *arr;
    int sz;

public:
    // Constructor
    SafeArray(int sz) : sz(sz) {
        arr = new int[sz];
        // Initialize array elements to 0
        for (int i = 0; i < sz; ++i) {
            arr[i] = 0;
        }
    }

    // Virtual destructor
    virtual ~SafeArray() {
        delete[] arr;
    }

    // Virtual operator[] method
    virtual int& operator[](int i) {
        if (i < 0 || i >= sz) {
            throw out_of_range("Index out of range");
        }
        return arr[i];
    }

    // Get size of array
    int size() {
        return sz;
    }

    // Print elements of array
    void print() {
        for (int i = 0; i < sz; ++i) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

class SafeVector : public SafeArray {
private:
    int capacity;

public:
    // Constructor
    SafeVector(int sz) : SafeArray(sz), capacity(sz) {}

    // Destructor
    ~SafeVector() {}

    // Override push_back method
    void push_back(int val) {
        if (sz == capacity) {
            int newCapacity = capacity * 2; // Double the capacity
            int *newArr = new int[newCapacity];
            // Copy existing elements to the new array
            for (int i = 0; i < sz; ++i) {
                newArr[i] = arr[i];
            }
            delete[] arr;
            arr = newArr;
            capacity = newCapacity;
        }
        arr[sz++] = val;
    }

    // Override pop_back method
    void pop_back() {
        if (sz == 0) {
            throw underflow_error("Vector is empty");
        }
        --sz;
    }

    // Override back method
    int back() {
        if (sz == 0) {
            throw underflow_error("Vector is empty");
        }
        return arr[sz - 1];
    }
};

int main() {
    SafeVector v(5);
    v.push_back(1);
    v.push_back(2);
    v.push_back(3);

    cout << "Vector elements: ";
    v.print();

    cout << "Size: " << v.size() << endl;

    v.pop_back();
    cout << "After pop_back(): ";
    v.print();

    cout << "Last element: " << v.back() << endl;

    try {
        v.pop_back(); // Now empty
        v.pop_back(); // Trying to pop from empty vector
    }
    catch (std::underflow_error& e) {
        cout << "Caught an exception of type: " << e.what() << endl;
    }

    return 0;
}
