#include <iostream>
using namespace std;

const int SIZE = 9;

void printBoard(int board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            cout << board[i][j] << " ";
            if ((j + 1) % 3 == 0 && j < SIZE - 1) {
                cout << "| ";
            }
        }
        cout << endl;
        if ((i + 1) % 3 == 0 && i < SIZE - 1) {
            cout << "------+-------+------" << endl;
        }
    }
}

bool isValid(int board[SIZE][SIZE], int row, int col, int num) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[row - row % 3 + i][col - col % 3 + j] == num) {
                return false;
            }
        }
    }

    for (int j = 0; j < SIZE; ++j) {
        if (board[row][j] == num) {
            return false;
        }
    }

    for (int i = 0; i < SIZE; ++i) {
        if (board[i][col] == num) {
            return false;
        }
    }

    return true;
}

void playSudoku(int board[SIZE][SIZE]) {
    int row, col, num;

    while (true) {
        cout << "Current Sudoku Board:" << endl;
        printBoard(board);

        cout << "Enter row (1-9), column (1-9), and number (1-9) separated by spaces (0 to exit): ";
        cin >> row;

        if (row == 0) {
            cout << "Game ended. Thanks for playing!" << endl;
            break;
        }

        cin >> col >> num;

        if (row < 1 || row > SIZE || col < 1 || col > SIZE || num < 1 || num > SIZE) {
            cout << "Invalid input! Please enter valid values." << endl;
            continue;
        }

        if (isValid(board, row - 1, col - 1, num)) {
            board[row - 1][col - 1] = num;
        } else {
            cout << "Invalid move! Try again." << endl;
        }
    }
}

int main() {
    int sudokuBoard[SIZE][SIZE] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    playSudoku(sudokuBoard);

    return 0;
}
